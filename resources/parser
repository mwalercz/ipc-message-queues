%target-directory src/parser
%parsefun-source Parser.cpp
%scanner Scanner.h

//%print-tokens
//%debug
//%error-verbose
%baseclass-preinclude ../Message.hpp
%token INTEGER STRING FLOAT SIGN
%token INTEGER_VAL STRING_VAL FLOAT_VAL
%token OUTPUT READ INPUT
%token COMA, DCOLON, STAR
%polymorphic String: std::string;
             Int: int;
             Float: float;
             Boolean: bool;
             Element: Element;
             Tuple: Tuple;
             Comparison: Element::Comparison;

%type <String> string_val
%type <Int> integer_val
%type <Float> float_val
%type <Element> tuple_element
%type <Tuple> tuple
%type <Boolean> query_head
%type <Comparison> comparison

%%
message:
    query_head parts
    {
        this->result_ = std::move(std::unique_ptr<Message> (new Query(msgPid_, sendTime_, timeout_, typeCalculator_.getType(), queryParts_, $1)));
    }
    | tuple
    {
        this->result_ = std::move(std::unique_ptr<Message> (new Output($1, msgPid_, sendTime_, timeout_)));
    }

;


query_head:
    INPUT
    {
        $$ = false;
    }
    | READ
    {
        $$ = true;
    }
;

parts:
    part
    | parts COMA part
;

part:
    INTEGER DCOLON STAR
    {
        Element element(0);
        typeCalculator_.calculate(element);
        queryPartIdx_ += 1;
    }
    | FLOAT DCOLON STAR
    {
        float flo(0.0);
        Element element(flo);
        typeCalculator_.calculate(element);
        queryPartIdx_ += 1;
    }
    | STRING DCOLON STAR
    {
        std::string str("");
        Element element(str);
        typeCalculator_.calculate(element);
        queryPartIdx_ += 1;
    }
    | INTEGER DCOLON comparison integer_val
    {
        Element element($4);
        typeCalculator_.calculate(element);
        QueryPart qp(queryPartIdx_, element, $3);
        queryParts_.push_back(qp);
        queryPartIdx_ += 1;
    }
    | FLOAT DCOLON comparison float_val
    {
         Element element($4);
         typeCalculator_.calculate(element);
         QueryPart qp(queryPartIdx_, element, $3);
         queryParts_.push_back(qp);
         queryPartIdx_ += 1;
    }
    | STRING DCOLON comparison string_val
    {
         Element element($4);
         typeCalculator_.calculate(element);
         QueryPart qp(queryPartIdx_, element, $3);
         queryParts_.push_back(qp);
         queryPartIdx_ += 1;
    }
;

comparison:
    SIGN
    {
        std::string matched = std::string(d_scanner_.matched());
        if (matched == ">")
            $$ = Element::Comparison::kGreater;
        if (matched == ">=")
            $$ = Element::Comparison::kGreaterOrEqual;
        if (matched == "=")
            $$ = Element::Comparison::kEqual;
        if (matched == "<")
            $$ = Element::Comparison::kLower;
        if (matched == "<=")
            $$ = Element::Comparison::kLowerOrEqual;
    }
;

integer_val:
    INTEGER_VAL
    {
        $$ = int(std::stoi(d_scanner_.matched()));
    }
;

float_val:
    FLOAT_VAL
    {

        $$ = float(std::stof(d_scanner_.matched()));
    }
;

string_val:
    STRING_VAL
    {
        $$ = std::string(d_scanner_.matched());
    }
;

tuple:
    tuple_head tuple_elements
    {
        Tuple tuple(tupleElements_);
        ($$).swap(tuple);
    }


;

tuple_head:
    OUTPUT
;

tuple_elements:
    tuple_element
    {
        tupleElements_.push_back($1);
    }
    | tuple_elements COMA tuple_element
    {
        tupleElements_.push_back($3);
    }
;

tuple_element:
    float_val
    {
        Element element($1);
        ($$) = element;
    }

    | integer_val
    {

         Element element($1);
         ($$) = element;
    }

    | string_val
    {
          Element element($1);
          ($$) = element;
    }

;
