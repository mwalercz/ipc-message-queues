// Generated by Bisonc++ V4.10.01 on Thu, 19 May 2016 02:06:43 +0200

#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them

// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <iomanip>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
        // full
    };

    enum ReservedTokens {
        PARSE_ACCEPT = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_ = -2,
        _EOF_ = -1,
        _error_ = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
        // non-terminal
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union {
            int _field_1_;      // initializer, allowing initializations 
            // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
            // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata

// Productions Info Records:
    PI__ const s_productionInfo[] =
            {
                    {0,   0}, // not used: reduction values are negative
                    {270, 1}, // 1: message ->  query
                    {270, 1}, // 2: message ->  tuple
                    {271, 2}, // 3: query ->  query_head parts
                    {273, 1}, // 4: query_head (OUTPUT) ->  OUTPUT
                    {273, 1}, // 5: query_head (READ) ->  READ
                    {274, 1}, // 6: parts ->  part
                    {274, 3}, // 7: parts (COMA) ->  parts COMA part
                    {275, 3}, // 8: part (INTEGER) ->  INTEGER DCOLON STAR
                    {275, 3}, // 9: part (FLOAT) ->  FLOAT DCOLON STAR
                    {275, 3}, // 10: part (STRING) ->  STRING DCOLON STAR
                    {275, 4}, // 11: part (INTEGER) ->  INTEGER DCOLON SIGN integer_val
                    {275, 4}, // 12: part (FLOAT) ->  FLOAT DCOLON SIGN float_val
                    {275, 4}, // 13: part (STRING) ->  STRING DCOLON SIGN string_val
                    {276, 1}, // 14: integer_val ->  number
                    {277, 3}, // 15: float_val (DOT) ->  number DOT number
                    {277, 2}, // 16: float_val (DOT) ->  number DOT
                    {278, 1}, // 17: string_val (WORD) ->  WORD
                    {278, 2}, // 18: string_val (WORD) ->  string_val WORD
                    {279, 1}, // 19: number (DIGIT) ->  DIGIT
                    {279, 2}, // 20: number (DIGIT) ->  number DIGIT
                    {272, 2}, // 21: tuple ->  tuple_head tuple_elements
                    {280, 1}, // 22: tuple_head (INPUT) ->  INPUT
                    {281, 1}, // 23: tuple_elements ->  tuple_element
                    {281, 3}, // 24: tuple_elements (COMA) ->  tuple_elements COMA tuple_element
                    {282, 1}, // 25: tuple_element ->  float_val
                    {282, 1}, // 26: tuple_element ->  integer_val
                    {282, 1}, // 27: tuple_element ->  string_val
                    {283, 1}, // 28: message_$ ->  message
            };

// State info and SR__ transitions for each state.


    SR__ s_0[] =
            {
                    {{REQ_TOKEN}, {9}},
                    {{270},       {1}}, // message
                    {{271},       {2}}, // query
                    {{272},       {3}}, // tuple
                    {{273},       {4}}, // query_head
                    {{280},       {5}}, // tuple_head
                    {{263},       {6}}, // OUTPUT
                    {{264},       {7}}, // READ
                    {{265},       {8}}, // INPUT
                    {{0},         {0}},
            };

    SR__ s_1[] =
            {
                    {{REQ_TOKEN}, {2}},
                    {{_EOF_},     {PARSE_ACCEPT}},
                    {{0},         {0}},
            };

    SR__ s_2[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-1}},
            };

    SR__ s_3[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-2}},
            };

    SR__ s_4[] =
            {
                    {{REQ_TOKEN}, {6}},
                    {{274},       {9}}, // parts
                    {{275},       {10}}, // part
                    {{257},       {11}}, // INTEGER
                    {{259},       {12}}, // FLOAT
                    {{258},       {13}}, // STRING
                    {{0},         {0}},
            };

    SR__ s_5[] =
            {
                    {{REQ_TOKEN}, {9}},
                    {{281},       {14}}, // tuple_elements
                    {{282},       {15}}, // tuple_element
                    {{277},       {16}}, // float_val
                    {{276},       {17}}, // integer_val
                    {{278},       {18}}, // string_val
                    {{279},       {19}}, // number
                    {{261},       {20}}, // WORD
                    {{260},       {21}}, // DIGIT
                    {{0},         {0}},
            };

    SR__ s_6[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-4}},
            };

    SR__ s_7[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-5}},
            };

    SR__ s_8[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-22}},
            };

    SR__ s_9[] =
            {
                    {{REQ_DEF}, {2}},
                    {{266},     {22}}, // COMA
                    {{0},       {-3}},
            };

    SR__ s_10[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-6}},
            };

    SR__ s_11[] =
            {
                    {{REQ_TOKEN}, {2}},
                    {{267},       {23}}, // DCOLON
                    {{0},         {0}},
            };

    SR__ s_12[] =
            {
                    {{REQ_TOKEN}, {2}},
                    {{267},       {24}}, // DCOLON
                    {{0},         {0}},
            };

    SR__ s_13[] =
            {
                    {{REQ_TOKEN}, {2}},
                    {{267},       {25}}, // DCOLON
                    {{0},         {0}},
            };

    SR__ s_14[] =
            {
                    {{REQ_DEF}, {2}},
                    {{266},     {26}}, // COMA
                    {{0},       {-21}},
            };

    SR__ s_15[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-23}},
            };

    SR__ s_16[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-25}},
            };

    SR__ s_17[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-26}},
            };

    SR__ s_18[] =
            {
                    {{REQ_DEF}, {2}},
                    {{261},     {27}}, // WORD
                    {{0},       {-27}},
            };

    SR__ s_19[] =
            {
                    {{REQ_DEF}, {3}},
                    {{269},     {28}}, // DOT
                    {{260},     {29}}, // DIGIT
                    {{0},       {-14}},
            };

    SR__ s_20[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-17}},
            };

    SR__ s_21[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-19}},
            };

    SR__ s_22[] =
            {
                    {{REQ_TOKEN}, {5}},
                    {{275},       {30}}, // part
                    {{257},       {11}}, // INTEGER
                    {{259},       {12}}, // FLOAT
                    {{258},       {13}}, // STRING
                    {{0},         {0}},
            };

    SR__ s_23[] =
            {
                    {{REQ_TOKEN}, {3}},
                    {{268},       {31}}, // STAR
                    {{262},       {32}}, // SIGN
                    {{0},         {0}},
            };

    SR__ s_24[] =
            {
                    {{REQ_TOKEN}, {3}},
                    {{268},       {33}}, // STAR
                    {{262},       {34}}, // SIGN
                    {{0},         {0}},
            };

    SR__ s_25[] =
            {
                    {{REQ_TOKEN}, {3}},
                    {{268},       {35}}, // STAR
                    {{262},       {36}}, // SIGN
                    {{0},         {0}},
            };

    SR__ s_26[] =
            {
                    {{REQ_TOKEN}, {8}},
                    {{282},       {37}}, // tuple_element
                    {{277},       {16}}, // float_val
                    {{276},       {17}}, // integer_val
                    {{278},       {18}}, // string_val
                    {{279},       {19}}, // number
                    {{261},       {20}}, // WORD
                    {{260},       {21}}, // DIGIT
                    {{0},         {0}},
            };

    SR__ s_27[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-18}},
            };

    SR__ s_28[] =
            {
                    {{REQ_DEF}, {3}},
                    {{279},     {38}}, // number
                    {{260},     {21}}, // DIGIT
                    {{0},       {-16}},
            };

    SR__ s_29[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-20}},
            };

    SR__ s_30[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-7}},
            };

    SR__ s_31[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-8}},
            };

    SR__ s_32[] =
            {
                    {{REQ_TOKEN}, {4}},
                    {{276},       {39}}, // integer_val
                    {{279},       {40}}, // number
                    {{260},       {21}}, // DIGIT
                    {{0},         {0}},
            };

    SR__ s_33[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-9}},
            };

    SR__ s_34[] =
            {
                    {{REQ_TOKEN}, {4}},
                    {{277},       {41}}, // float_val
                    {{279},       {42}}, // number
                    {{260},       {21}}, // DIGIT
                    {{0},         {0}},
            };

    SR__ s_35[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-10}},
            };

    SR__ s_36[] =
            {
                    {{REQ_TOKEN}, {3}},
                    {{278},       {43}}, // string_val
                    {{261},       {20}}, // WORD
                    {{0},         {0}},
            };

    SR__ s_37[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-24}},
            };

    SR__ s_38[] =
            {
                    {{REQ_DEF}, {2}},
                    {{260},     {29}}, // DIGIT
                    {{0},       {-15}},
            };

    SR__ s_39[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-11}},
            };

    SR__ s_40[] =
            {
                    {{REQ_DEF}, {2}},
                    {{260},     {29}}, // DIGIT
                    {{0},       {-14}},
            };

    SR__ s_41[] =
            {
                    {{DEF_RED}, {1}},
                    {{0},       {-12}},
            };

    SR__ s_42[] =
            {
                    {{REQ_TOKEN}, {3}},
                    {{269},       {28}}, // DOT
                    {{260},       {29}}, // DIGIT
                    {{0},         {0}},
            };

    SR__ s_43[] =
            {
                    {{REQ_DEF}, {2}},
                    {{261},     {27}}, // WORD
                    {{0},       {-13}},
            };


// State array:
    SR__ *s_state[] =
            {
                    s_0, s_1, s_2, s_3, s_4, s_5, s_6, s_7, s_8, s_9,
                    s_10, s_11, s_12, s_13, s_14, s_15, s_16, s_17, s_18, s_19,
                    s_20, s_21, s_22, s_23, s_24, s_25, s_26, s_27, s_28, s_29,
                    s_30, s_31, s_32, s_33, s_34, s_35, s_36, s_37, s_38, s_39,
                    s_40, s_41, s_42, s_43,
            };

    typedef std::unordered_map<int, char const *> SMap;
    typedef SMap::value_type SMapVal;

    SMapVal s_symArr[] =
            {
                    SMapVal(-2, "_UNDETERMINED_"),  // predefined symbols
                    SMapVal(-1, "_EOF_"),
                    SMapVal(256, "_error_"),

                    SMapVal(257, "INTEGER"),
                    SMapVal(258, "STRING"),
                    SMapVal(259, "FLOAT"),
                    SMapVal(260, "DIGIT"),
                    SMapVal(261, "WORD"),
                    SMapVal(262, "SIGN"),
                    SMapVal(263, "OUTPUT"),
                    SMapVal(264, "READ"),
                    SMapVal(265, "INPUT"),
                    SMapVal(266, "COMA"),
                    SMapVal(267, "DCOLON"),
                    SMapVal(268, "STAR"),
                    SMapVal(269, "DOT"),
                    SMapVal(270, "message"),
                    SMapVal(271, "query"),
                    SMapVal(272, "tuple"),
                    SMapVal(273, "query_head"),
                    SMapVal(274, "parts"),
                    SMapVal(275, "part"),
                    SMapVal(276, "integer_val"),
                    SMapVal(277, "float_val"),
                    SMapVal(278, "string_val"),
                    SMapVal(279, "number"),
                    SMapVal(280, "tuple_head"),
                    SMapVal(281, "tuple_elements"),
                    SMapVal(282, "tuple_element"),
                    SMapVal(283, "message_$"),
            };

    SMap s_symbol
            (
                    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
            );

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
        :
        d_stackIdx__(-1),
        // $insert debuginit
        d_debug__(true),
        d_nErrors__(0),
        // $insert requiredtokens
        d_requiredTokens__(0),
        d_acceptedTokens__(d_requiredTokens__),
        d_token__(_UNDETERMINED_),
        d_nextToken__(_UNDETERMINED_) { }

// $insert debugfunctions
std::ostringstream ParserBase::s_out__;

std::ostream &ParserBase::dflush__(std::ostream &out) {
    std::ostringstream &s_out__ = dynamic_cast<std::ostringstream &>(out);

    std::cout << "    " << s_out__.str() << std::flush;
    s_out__.clear();
    s_out__.str("");
    return out;
}

std::string ParserBase::stype__(char const *pre,
                                STYPE__ const &semVal, char const *post) const {
    return "";
}

std::string ParserBase::symbol__(int value) const {
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << '\'' << it->second << '\'';
    else if (isprint(value))
        ostr << '`' << static_cast<char>(value) << "' (" << value << ')';
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << '\'';
    return ostr.str();
}


void Parser::print__() {
// $insert print

    enum {
        _UNDETERMINED_ = -2
    };

    std::cout << "Token: " << symbol__(d_token__) << ", text: `";
    if (d_token__ == _UNDETERMINED_)
        std::cout << "'\n";
    else
        std::cout << d_scanner.matched() << "'\n";
}

void ParserBase::clearin() {
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state) {
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size()) {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert debug
    if (d_debug__)
        s_out__ << "push(state " << state << stype__(", semantic TOS = ", d_val__, ")") << ')' << "\n" << dflush__;
}

void ParserBase::popToken__() {
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::pushToken__(int token) {
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}

void ParserBase::pop__(size_t count) {
    // $insert debug
    if (d_debug__)
        s_out__ << "pop(" << count << ") from stack having size " << (d_stackIdx__ + 1) << "\n" << dflush__;
    if (d_stackIdx__ < static_cast<int>(count)) {
        // $insert debug
        if (d_debug__)
            s_out__ << "Terminating parse(): unrecoverable input error at token " << symbol__(d_token__) << "\n" <<
            dflush__;
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert debug
    if (d_debug__)
        s_out__ << "pop(): next state: " << d_state__ << ", token: " << symbol__(d_token__);
    // $insert debug
    if (d_debug__)
        s_out__ << stype__("semantic: ", d_val__) << "\n" << dflush__;
}

inline size_t ParserBase::top__() const {
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try {
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    // $insert debug
    if (d_debug__)
        s_out__ << "executeAction(): of rule " << production;
    // $insert debug
    if (d_debug__)
        s_out__ << stype__(", semantic [TOS]: ", d_val__) << " ..." << "\n" << dflush__;
    switch (production) {
        // $insert actioncases

    }
    // $insert debug
    if (d_debug__)
        s_out__ << "... action of rule " << production << " completed";
    // $insert debug
    if (d_debug__)
        s_out__ << stype__(", semantic: ", d_val__) << "\n" << dflush__;
}
catch (std::exception const &exc) {
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi) {
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

    // $insert debug
    if (d_debug__)
        s_out__ << "reduce(): by rule " << (&pi - s_productionInfo);
    // $insert debug
    if (d_debug__)
        s_out__ << " to N-terminal " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken() {
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_) {
        popToken__();                       // consume pending token
        // $insert debug
        if (d_debug__)
            s_out__ << "nextToken(): popped " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" <<
            dflush__;
    }
    else {
        ++d_acceptedTokens__;               // accept another token (see
        // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
    // $insert debug
    if (d_debug__)
        s_out__ << "nextToken(): using " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" <<
        dflush__;
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery) {
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token

    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;


    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            // $insert debug
            if (d_debug__)
                s_out__ << "lookup(" << d_state__ << ", " << symbol__(d_token__);
            // $insert debug
            if (d_debug__)
                s_out__ << "): default reduction by rule " << -elementPtr->d_action << "\n" << dflush__;
            return elementPtr->d_action;
        }
        // $insert debug
        if (d_debug__)
            s_out__ << "lookup(" << d_state__ << ", " << symbol__(d_token__) << "): Not ";
        // $insert debug
        if (d_debug__)
            s_out__ << "found. " << (recovery ? "Continue" : "Start") << " error recovery." << "\n" << dflush__;

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;

// $insert debuglookup
    if (d_debug__) {
        s_out__ << "lookup(" << d_state__ << ", " << symbol__(d_token__);

        if (action < 0)             // a reduction was found
            s_out__ << "): reduce by rule " << -action;
        else if (action == 0)
            s_out__ << "): ACCEPT";
        else
            s_out__ << "): shift " << action << " (" << symbol__(d_token__) <<
            " processed)";

        s_out__ << "\n" << dflush__;
    }

    return action;
}

// When an error has occurred, pop elements off the stack until the top
// state has an error-item. If none is found, the default recovery
// mode (which is to abort) is activated.
//
// If EOF is encountered without being appropriate for the current state,
// then the error recovery will fall back to the default recovery mode.
// (i.e., parsing terminates)
void Parser::errorRecovery()
try {
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }

    // $insert debug
    if (d_debug__)
        s_out__ << "errorRecovery(): " << d_nErrors__ << " error(s) so far. State = " << top__() << "\n" << dflush__;

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM)) {
        // $insert debug
        if (d_debug__)
            s_out__ << "errorRecovery(): pop state " << top__() << "\n" << dflush__;
        pop__();
    }
    // $insert debug
    if (d_debug__)
        s_out__ << "errorRecovery(): state " << top__() << " is an ERROR state" << "\n" << dflush__;

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
    // chance to be processed
    // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
    // token (we're now in an
    // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true) {
        try {
            if (s_state[d_state__]->d_type & REQ_TOKEN) {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }

            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();
                // $insert debug
                if (d_debug__)
                    s_out__ << "errorRecovery() SHIFT state " << action;
                // $insert debug
                if (d_debug__)
                    s_out__ << ", continue with " << symbol__(d_token__) << "\n" << dflush__;

                if (gotToken) {
                    // $insert debug
                    if (d_debug__)
                        s_out__ << "errorRecovery() COMPLETED: next state ";
                    // $insert debug
                    if (d_debug__)
                        s_out__ << action << ", no token yet" << "\n" << dflush__;

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0) {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);

                // next token is the rule's LHS
                reduce__(s_productionInfo[-action]);
                // $insert debug
                if (d_debug__)
                    s_out__ << "errorRecovery() REDUCE by rule " << -action;
                // $insert debug
                if (d_debug__)
                    s_out__ << ", token = " << symbol__(d_token__) << "\n" << dflush__;
            }
            else
                ABORT();                    // abort when accepting during
            // error recovery
        }
        catch (...) {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_

            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

// The parsing algorithm:
// Initially, state 0 is pushed on the stack, and d_token__ as well as
// d_nextToken__ are initialized to _UNDETERMINED_.
//
// Then, in an eternal loop:
//
//  1. If a state does not have REQ_TOKEN no token is assigned to
//     d_token__. If the state has REQ_TOKEN, nextToken() is called to
//      determine d_nextToken__ and d_token__ is set to
//     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is
//     _UNDETERMINED_.
//
//  2. lookup() is called:
//     d_token__ is stored in the final element's d_token field of the
//     state's SR_ array.
//
//  3. The current token is looked up in the state's SR_ array
//
//  4. Depending on the result of the lookup() function the next state is
//     shifted on the parser's stack, a reduction by some rule is applied,
//     or the parsing function returns ACCEPT(). When a reduction is
//     called for, any action that may have been defined for that
//     reduction is executed.
//
//  5. An error occurs if d_token__ is not found, and the state has no
//     default reduction. Error handling was described at the top of this
//     file.

int Parser::parse()
try {
    // $insert debug
    if (d_debug__)
        s_out__ << "parse(): Parsing starts" << "\n" << dflush__;
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true) {
        // $insert debug
        if (d_debug__)
            s_out__ << "==" << "\n" << dflush__;
        try {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                // next token is the rule's LHS
                reduce__(s_productionInfo[-action]);
            }
            else
                ACCEPT();
        }
        catch (ErrorRecovery__) {
            errorRecovery();
        }
    }
}
catch (Return__ retValue) {
    // $insert debug
    if (d_debug__)
        s_out__ << "parse(): returns " << retValue << "\n" << dflush__;
    return retValue;
}


