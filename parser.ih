// Generated by Bisonc++ V4.10.01 on Fri, 13 May 2016 23:22:37 +0200

// Include this file in the sources of the class Parser.

#include "Parser.hpp"


inline void Parser::error(char const *msg) {
    std::cerr << msg << '\n';
}

inline int Parser::lex() {
    return d_scanner.lex();
}

inline void Parser::print() {
    print__();           // displays tokens if --print was specified
}

inline void Parser::exceptionHandler__(std::exception const &exc) {
    throw;              // re-implement to handle exceptions thrown by actions
}

int Parser::prepareAndParse(const std::string& input) {
    std::istringstream in(input);
    switchInputStream(in);
    prepareObjects();
    return parse();
}



std::unique_ptr<Message> Parser::parse(const std::string& input, Time sendTime, TimeDuration timeout, MsgPid msgPid) {
    initVariables(sendTime, timeout, msgPid);
    if (prepareAndParse(input) == 0)
        return std::move(result_);
    else throw std::domain_error("Given string is not valid and cannot be parsed");
}

void Parser::initVariables(Time sendTime, TimeDuration timeout, MsgPid msgPid) {
    time_ = sendTime;
    timeDuration_ = timeout;
    msgPid_ = msgPid;
}

void Parser::prepareObjects() {
    queryPart_idx = 0;
    typeCalculator_.reset();
    tupleElements_.clear();
    queryParts_.clear();
}


void Parser::switchInputStream(std::istream &in) {
    d_scanner.switchStreams(in);
}


















// Add here includes that are only required for the compilation
// of Parser's sources.



// UN-comment the next using-declaration if you want to use
// int Parser's sources symbols from the namespace std without
// specifying std::

//using namespace std;
 
